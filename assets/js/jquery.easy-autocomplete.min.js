/*
 * easy-autocomplete
 * jQuery plugin for autocompletion
 *
 * @author Łukasz Pawełczak (http://github.com/pawelczak)
 * @version 1.3.5
 * Copyright  License:
 */

var EasyAutocomplete = (function (a) {
    return a.Configuration = function (a) {
        function b() { if (a.dataType === 'xml' && (a.getValue || (a.getValue = function (a) { return $(a).text(); }), a.list || (a.list = {}), a.list.sort || (a.list.sort = {}), a.list.sort.method = function (b, c) { return b = a.getValue(b), c = a.getValue(c), c > b ? -1 : b > c ? 1 : 0; }, a.list.match || (a.list.match = {}), a.list.match.method = function (a, b) { return a.search(b) > -1; }), void 0 !== a.categories && a.categories instanceof Array) { for (var b = [], c = 0, d = a.categories.length; d > c; c += 1) { const e = a.categories[c]; for (const f in h.categories[0]) void 0 === e[f] && (e[f] = h.categories[0][f]); b.push(e); }a.categories = b; } } function c() { function b(a, c) { const d = a || {}; for (const e in a) void 0 !== c[e] && c[e] !== null && (typeof c[e] !== 'object' || c[e] instanceof Array ? d[e] = c[e] : b(a[e], c[e])); return void 0 !== c.data && c.data !== null && typeof c.data === 'object' && (d.data = c.data), d; }h = b(h, a); } function d() { if (h.url !== 'list-required' && typeof h.url !== 'function') { var b = h.url; h.url = function () { return b; }; } if (void 0 !== h.ajaxSettings.url && typeof h.ajaxSettings.url !== 'function') { var b = h.ajaxSettings.url; h.ajaxSettings.url = function () { return b; }; } if (typeof h.listLocation === 'string') { const c = h.listLocation; h.dataType.toUpperCase() === 'XML' ? h.listLocation = function (a) { return $(a).find(c); } : h.listLocation = function (a) { return a[c]; }; } if (typeof h.getValue === 'string') { const d = h.getValue; h.getValue = function (a) { return a[d]; }; } void 0 !== a.categories && (h.categoriesAssigned = !0); } function e() { void 0 !== a.ajaxSettings && typeof a.ajaxSettings === 'object' ? h.ajaxSettings = a.ajaxSettings : h.ajaxSettings = {}; } function f(a) { return void 0 !== h[a] && h[a] !== null; } function g(a, b) { function c(b, d) { for (const e in d) void 0 === b[e] && a.log(`Property '${e}' does not exist in EasyAutocomplete options API.`), typeof b[e] === 'object' && $.inArray(e, i) === -1 && c(b[e], d[e]); }c(h, b); } var h = {
            data: 'list-required',
            url: 'list-required',
            dataType: 'json',
            listLocation(a) { return a; },
            xmlElementName: '',
            getValue(a) { return a; },
            autocompleteOff: !0,
            placeholder: !1,
            ajaxCallback() {},
            matchResponseProperty: !1,
            list: {
                sort: { enabled: !1, method(a, b) { return a = h.getValue(a), b = h.getValue(b), b > a ? -1 : a > b ? 1 : 0; } }, maxNumberOfElements: 6, hideOnEmptyPhrase: !0, match: { enabled: !1, caseSensitive: !1, method(a, b) { return a.search(b) > -1; } }, showAnimation: { type: 'normal', time: 400, callback() {} }, hideAnimation: { type: 'normal', time: 400, callback() {} }, onClickEvent() {}, onSelectItemEvent() {}, onLoadEvent() {}, onChooseEvent() {}, onKeyEnterEvent() {}, onMouseOverEvent() {}, onMouseOutEvent() {}, onShowListEvent() {}, onHideListEvent() {},
            },
            highlightPhrase: !0,
            theme: '',
            cssClasses: '',
            minCharNumber: 0,
            requestDelay: 0,
            adjustWidth: !0,
            ajaxSettings: {},
            preparePostData(a, b) { return a; },
            loggerEnabled: !0,
            template: '',
            categoriesAssigned: !1,
            categories: [{ maxNumberOfElements: 4 }],
        }; var i = ['ajaxSettings', 'template']; this.get = function (a) { return h[a]; }, this.equals = function (a, b) { return !(!f(a) || h[a] !== b); }, this.checkDataUrlProperties = function () { return h.url !== 'list-required' || h.data !== 'list-required'; }, this.checkRequiredProperties = function () { for (const a in h) if (h[a] === 'required') return logger.error(`Option ${a} must be defined`), !1; return !0; }, this.printPropertiesThatDoesntExist = function (a, b) { g(a, b); }, b(), c(), h.loggerEnabled === !0 && g(console, a), e(), d();
    }, a;
}(EasyAutocomplete || {})); var EasyAutocomplete = (function (a) { return a.Logger = function () { this.error = function (a) { console.log(`ERROR: ${a}`); }, this.warning = function (a) { console.log(`WARNING: ${a}`); }; }, a; }(EasyAutocomplete || {})); var EasyAutocomplete = (function (a) { return a.Constans = function () { const a = { CONTAINER_CLASS: 'easy-autocomplete-container', CONTAINER_ID: 'eac-container-', WRAPPER_CSS_CLASS: 'easy-autocomplete' }; this.getValue = function (b) { return a[b]; }; }, a; }(EasyAutocomplete || {})); var EasyAutocomplete = (function (a) { return a.ListBuilderService = function (a, b) { function c(b, c) { function d() { let d; const e = {}; return void 0 !== b.xmlElementName && (e.xmlElementName = b.xmlElementName), void 0 !== b.listLocation ? d = b.listLocation : void 0 !== a.get('listLocation') && (d = a.get('listLocation')), void 0 !== d ? typeof d === 'string' ? e.data = $(c).find(d) : typeof d === 'function' && (e.data = d(c)) : e.data = c, e; } function e() { const a = {}; return void 0 !== b.listLocation ? typeof b.listLocation === 'string' ? a.data = c[b.listLocation] : typeof b.listLocation === 'function' && (a.data = b.listLocation(c)) : a.data = c, a; } let f = {}; if (f = a.get('dataType').toUpperCase() === 'XML' ? d() : e(), void 0 !== b.header && (f.header = b.header), void 0 !== b.maxNumberOfElements && (f.maxNumberOfElements = b.maxNumberOfElements), void 0 !== a.get('list').maxNumberOfElements && (f.maxListSize = a.get('list').maxNumberOfElements), void 0 !== b.getValue) if (typeof b.getValue === 'string') { const g = b.getValue; f.getValue = function (a) { return a[g]; }; } else typeof b.getValue === 'function' && (f.getValue = b.getValue); else f.getValue = a.get('getValue'); return f; } function d(b) { const c = []; return void 0 === b.xmlElementName && (b.xmlElementName = a.get('xmlElementName')), $(b.data).find(b.xmlElementName).each(function () { c.push(this); }), c; } this.init = function (b) { const c = []; const d = {}; return d.data = a.get('listLocation')(b), d.getValue = a.get('getValue'), d.maxListSize = a.get('list').maxNumberOfElements, c.push(d), c; }, this.updateCategories = function (b, d) { if (a.get('categoriesAssigned')) { b = []; for (let e = 0; e < a.get('categories').length; e += 1) { const f = c(a.get('categories')[e], d); b.push(f); } } return b; }, this.convertXml = function (b) { if (a.get('dataType').toUpperCase() === 'XML') for (let c = 0; c < b.length; c += 1)b[c].data = d(b[c]); return b; }, this.processData = function (c, d) { for (let e = 0, f = c.length; f > e; e += 1)c[e].data = b(a, c[e], d); return c; }, this.checkIfDataExists = function (a) { for (let b = 0, c = a.length; c > b; b += 1) if (void 0 !== a[b].data && a[b].data instanceof Array && a[b].data.length > 0) return !0; return !1; }; }, a; }(EasyAutocomplete || {})); var EasyAutocomplete = (function (a) { return a.proccess = function (b, c, d) { function e(a, c) { let d = []; let e = ''; if (b.get('list').match.enabled) for (let g = 0, h = a.length; h > g; g += 1)e = b.get('getValue')(a[g]), f(e, c) && d.push(a[g]); else d = a; return d; } function f(a, c) { return b.get('list').match.caseSensitive || (typeof a === 'string' && (a = a.toLowerCase()), c = c.toLowerCase()), !!b.get('list').match.method(a, c); } function g(a) { return void 0 !== c.maxNumberOfElements && a.length > c.maxNumberOfElements && (a = a.slice(0, c.maxNumberOfElements)), a; } function h(a) { return b.get('list').sort.enabled && a.sort(b.get('list').sort.method), a; }a.proccess.match = f; let i = c.data; const j = d; return i = e(i, j), i = g(i), i = h(i); }, a; }(EasyAutocomplete || {})); var EasyAutocomplete = (function (a) {
    return a.Template = function (a) {
        const b = {
            basic: { type: 'basic', method(a) { return a; }, cssClass: '' },
            description: {
                type: 'description', fields: { description: 'description' }, method(a) { return `${a} - description`; }, cssClass: 'eac-description',
            },
            iconLeft: {
                type: 'iconLeft', fields: { icon: '' }, method(a) { return a; }, cssClass: 'eac-icon-left',
            },
            iconRight: {
                type: 'iconRight', fields: { iconSrc: '' }, method(a) { return a; }, cssClass: 'eac-icon-right',
            },
            links: {
                type: 'links', fields: { link: '' }, method(a) { return a; }, cssClass: '',
            },
            custom: { type: 'custom', method() {}, cssClass: '' },
        }; const c = function (a) { let c; const d = a.fields; return a.type === 'description' ? (c = b.description.method, typeof d.description === 'string' ? c = function (a, b) { return `${a} - <span>${b[d.description]}</span>`; } : typeof d.description === 'function' && (c = function (a, b) { return `${a} - <span>${d.description(b)}</span>`; }), c) : a.type === 'iconRight' ? (typeof d.iconSrc === 'string' ? c = function (a, b) { return `${a}<img class='eac-icon' src='${b[d.iconSrc]}' />`; } : typeof d.iconSrc === 'function' && (c = function (a, b) { return `${a}<img class='eac-icon' src='${d.iconSrc(b)}' />`; }), c) : a.type === 'iconLeft' ? (typeof d.iconSrc === 'string' ? c = function (a, b) { return `<img class='eac-icon' src='${b[d.iconSrc]}' />${a}`; } : typeof d.iconSrc === 'function' && (c = function (a, b) { return `<img class='eac-icon' src='${d.iconSrc(b)}' />${a}`; }), c) : a.type === 'links' ? (typeof d.link === 'string' ? c = function (a, b) { return `<a href='${b[d.link]}' >${a}</a>`; } : typeof d.link === 'function' && (c = function (a, b) { return `<a href='${d.link(b)}' >${a}</a>`; }), c) : a.type === 'custom' ? a.method : b.basic.method; }; const d = function (a) { return a && a.type && a.type && b[a.type] ? c(a) : b.basic.method; }; const e = function (a) { const c = function () { return ''; }; return a && a.type && a.type && b[a.type] ? (function () { const c = b[a.type].cssClass; return function () { return c; }; }()) : c; }; this.getTemplateClass = e(a), this.build = d(a);
    }, a;
}(EasyAutocomplete || {})); var EasyAutocomplete = (function (a) {
    return a.main = function (b, c) {
        function d() { return t.length === 0 ? void p.error("Input field doesn't exist.") : o.checkDataUrlProperties() ? o.checkRequiredProperties() ? (e(), void g()) : void p.error('Will not work without mentioned properties.') : void p.error("One of options variables 'data' or 'url' must be defined."); } function e() {
            function a() { const a = $('<div>'); let c = n.getValue('WRAPPER_CSS_CLASS'); o.get('theme') && o.get('theme') !== '' && (c += ` eac-${o.get('theme')}`), o.get('cssClasses') && o.get('cssClasses') !== '' && (c += ` ${o.get('cssClasses')}`), q.getTemplateClass() !== '' && (c += ` ${q.getTemplateClass()}`), a.addClass(c), t.wrap(a), o.get('adjustWidth') === !0 && b(); } function b() { const a = t.outerWidth(); t.parent().css('width', a); } function c() { t.unwrap(); } function d() {
                const a = $('<div>').addClass(n.getValue('CONTAINER_CLASS')); a.attr('id', f()).prepend($('<ul>')), (function () {
                    a.on('show.eac', () => { switch (o.get('list').showAnimation.type) { case 'slide': var b = o.get('list').showAnimation.time; var c = o.get('list').showAnimation.callback; a.find('ul').slideDown(b, c); break; case 'fade': var b = o.get('list').showAnimation.time; var c = o.get('list').showAnimation.callback; a.find('ul').fadeIn(b), c; break; default: a.find('ul').show(); }o.get('list').onShowListEvent(); }).on('hide.eac', () => { switch (o.get('list').hideAnimation.type) { case 'slide': var b = o.get('list').hideAnimation.time; var c = o.get('list').hideAnimation.callback; a.find('ul').slideUp(b, c); break; case 'fade': var b = o.get('list').hideAnimation.time; var c = o.get('list').hideAnimation.callback; a.find('ul').fadeOut(b, c); break; default: a.find('ul').hide(); }o.get('list').onHideListEvent(); }).on('selectElement.eac', () => { a.find('ul li').removeClass('selected'), a.find('ul li').eq(w).addClass('selected'), o.get('list').onSelectItemEvent(); }).on('loadElements.eac', (b, c, d) => {
                        let e = ''; const f = a.find('ul'); f.empty().detach(), v = []; for (var h = 0, i = 0, k = c.length; k > i; i += 1) {
                            var l = c[i].data; if (l.length !== 0) {
                                void 0 !== c[i].header && c[i].header.length > 0 && f.append(`<div class='eac-category' >${c[i].header}</div>`); for (var m = 0, n = l.length; n > m && h < c[i].maxListSize; m += 1) {
                                    e = $("<li><div class='eac-item'></div></li>"), (function () {
                                        const a = m; const b = h; const f = c[i].getValue(l[a]); e.find(' > div').on('click', () => { t.val(f).trigger('change'), w = b, j(b), o.get('list').onClickEvent(), o.get('list').onChooseEvent(); }).mouseover(() => { w = b, j(b), o.get('list').onMouseOverEvent(); }).mouseout(() => { o.get('list').onMouseOutEvent(); })
                                            .html(q.build(g(f, d), l[a]));
                                    }()), f.append(e), v.push(l[m]), h += 1;
                                }
                            }
                        }a.append(f), o.get('list').onLoadEvent();
                    });
                }()), t.after(a);
            } function e() { t.next(`.${n.getValue('CONTAINER_CLASS')}`).remove(); } function g(a, b) { return o.get('highlightPhrase') && b !== '' ? i(a, b) : a; } function h(a) { return a.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&'); } function i(a, b) { const c = h(b); return (`${a}`).replace(new RegExp(`(${c})`, 'gi'), '<b>$1</b>'); }t.parent().hasClass(n.getValue('WRAPPER_CSS_CLASS')) && (e(), c()), a(), d(), u = $(`#${f()}`), o.get('placeholder') && t.attr('placeholder', o.get('placeholder'));
        } function f() { let a = t.attr('id'); return a = n.getValue('CONTAINER_ID') + a; } function g() { function a() { s('autocompleteOff', !0) && n(), b(), c(), d(), e(), f(), g(); } function b() { t.focusout(() => { let a; let b = t.val(); o.get('list').match.caseSensitive || (b = b.toLowerCase()); for (let c = 0, d = v.length; d > c; c += 1) if (a = o.get('getValue')(v[c]), o.get('list').match.caseSensitive || (a = a.toLowerCase()), a === b) return w = c, void j(w); }); } function c() { t.off('keyup').keyup((a) => { function b(a) { function b() { const a = {}; const b = o.get('ajaxSettings') || {}; for (const c in b)a[c] = b[c]; return a; } function c(a, b) { return o.get('matchResponseProperty') !== !1 ? typeof o.get('matchResponseProperty') === 'string' ? b[o.get('matchResponseProperty')] === a : typeof o.get('matchResponseProperty') === 'function' ? o.get('matchResponseProperty')(b) === a : !0 : !0; } if (!(a.length < o.get('minCharNumber'))) { if (o.get('data') !== 'list-required') { const d = o.get('data'); let e = r.init(d); e = r.updateCategories(e, d), e = r.processData(e, a), k(e, a), t.parent().find('li').length > 0 ? h() : i(); } const f = b(); void 0 !== f.url && f.url !== '' || (f.url = o.get('url')), void 0 !== f.dataType && f.dataType !== '' || (f.dataType = o.get('dataType')), void 0 !== f.url && f.url !== 'list-required' && (f.url = f.url(a), f.data = o.get('preparePostData')(f.data, a), $.ajax(f).done((b) => { let d = r.init(b); d = r.updateCategories(d, b), d = r.convertXml(d), c(a, b) && (d = r.processData(d, a), k(d, a)), r.checkIfDataExists(d) && t.parent().find('li').length > 0 ? h() : i(), o.get('ajaxCallback')(); }).fail(() => { p.warning('Fail to load response data'); }).always(() => {})); } } switch (a.keyCode) { case 27: i(), l(); break; case 38: a.preventDefault(), v.length > 0 && w > 0 && (w -= 1, t.val(o.get('getValue')(v[w])), j(w)); break; case 40: a.preventDefault(), v.length > 0 && w < v.length - 1 && (w += 1, t.val(o.get('getValue')(v[w])), j(w)); break; default: if (a.keyCode > 40 || a.keyCode === 8) { const c = t.val(); o.get('list').hideOnEmptyPhrase !== !0 || a.keyCode !== 8 || c !== '' ? o.get('requestDelay') > 0 ? (void 0 !== m && clearTimeout(m), m = setTimeout(() => { b(c); }, o.get('requestDelay'))) : b(c) : i(); } } }); } function d() { t.on('keydown', (a) => { a = a || window.event; const b = a.keyCode; return b === 38 ? (suppressKeypress = !0, !1) : void 0; }).keydown((a) => { a.keyCode === 13 && w > -1 && (t.val(o.get('getValue')(v[w])), o.get('list').onKeyEnterEvent(), o.get('list').onChooseEvent(), w = -1, i(), a.preventDefault()); }); } function e() { t.off('keypress'); } function f() { t.focus(() => { t.val() !== '' && v.length > 0 && (w = -1, h()); }); } function g() { t.blur(() => { setTimeout(() => { w = -1, i(); }, 250); }); } function n() { t.attr('autocomplete', 'off'); }a(); } function h() { u.trigger('show.eac'); } function i() { u.trigger('hide.eac'); } function j(a) { u.trigger('selectElement.eac', a); } function k(a, b) { u.trigger('loadElements.eac', [a, b]); } function l() { t.trigger('blur'); } let m; var n = new a.Constans(); var o = new a.Configuration(c); var p = new a.Logger(); var q = new a.Template(c.template); var r = new a.ListBuilderService(o, a.proccess); var s = o.equals; var t = b; var u = ''; var v = []; var w = -1; a.consts = n, this.getConstants = function () { return n; }, this.getConfiguration = function () { return o; }, this.getContainer = function () { return u; }, this.getSelectedItemIndex = function () { return w; }, this.getItems = function () { return v; }, this.getItemData = function (a) { return v.length < a || void 0 === v[a] ? -1 : v[a]; }, this.getSelectedItemData = function () { return this.getItemData(w); }, this.build = function () { e(); }, this.init = function () { d(); };
    }, a.eacHandles = [], a.getHandle = function (b) { return a.eacHandles[b]; }, a.inputHasId = function (a) { return void 0 !== $(a).attr('id') && $(a).attr('id').length > 0; }, a.assignRandomId = function (b) { let c = ''; do c = `eac-${Math.floor(1e4 * Math.random())}`; while ($(`#${c}`).length !== 0);elementId = a.consts.getValue('CONTAINER_ID') + c, $(b).attr('id', c); }, a.setHandle = function (b, c) { a.eacHandles[c] = b; }, a;
}(EasyAutocomplete || {})); !(function (a) { a.fn.easyAutocomplete = function (b) { return this.each(function () { const c = a(this); const d = new EasyAutocomplete.main(c, b); EasyAutocomplete.inputHasId(c) || EasyAutocomplete.assignRandomId(c), d.init(), EasyAutocomplete.setHandle(d, c.attr('id')); }); }, a.fn.getSelectedItemIndex = function () { const b = a(this).attr('id'); return void 0 !== b ? EasyAutocomplete.getHandle(b).getSelectedItemIndex() : -1; }, a.fn.getItems = function () { const b = a(this).attr('id'); return void 0 !== b ? EasyAutocomplete.getHandle(b).getItems() : -1; }, a.fn.getItemData = function (b) { const c = a(this).attr('id'); return void 0 !== c && b > -1 ? EasyAutocomplete.getHandle(c).getItemData(b) : -1; }, a.fn.getSelectedItemData = function () { const b = a(this).attr('id'); return void 0 !== b ? EasyAutocomplete.getHandle(b).getSelectedItemData() : -1; }; }(jQuery));
